# 定义树的节点类
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.children = []

# 定义深度优先搜索函数
def dfs(node, num):
    # 如果当前节点为空，直接返回 0
    if not node:
        return 0
    
    # 更新当前的二进制数
    num = (num << 1) + node.val
    
    # 遍历当前节点的所有儿子，对每个儿子递归调用 dfs 函数
    ans = 0
    for child in node.children:
        ans += dfs(child, num)
    
    # 如果当前节点是叶子节点，判断当前二进制数是否在区间 [l,r] 内
    if not node.children:
        if l <= num <= r:
            return 1
        else:
            return 0
    
    # 返回答案
    return ans

# 主函数
if __name__ == '__main__':
    # 读入输入数据
    n, l, r = map(int, input().split())
    s = input()
    edges = []
    for i in range(n - 1):
        u, v = map(int, input().split())
        edges.append((u, v))
    
    # 创建树的节点并建立连接关系
    nodes = {i: TreeNode(int(s[i - 1])) for i in range(1, n + 1)}
    for u, v in edges:
        nodes[u].children.append(nodes[v])
    
    # 调用 DFS 函数计算答案并输出
    ans = dfs(nodes[1], 0)
    print(ans)
